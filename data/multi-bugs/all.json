[
  {
    "project": "Time",
    "bugId": 1,
    "locations": [
      "org/joda/time/Partial.java#221#                } else if (compare == 0) {",
      "org/joda/time/field/UnsupportedDurationField.java#227#        if (durationField.isSupported()) {",
      "org/joda/time/field/UnsupportedDurationField.java#228#            return 1;",
      "org/joda/time/field/UnsupportedDurationField.java#229#        }",
      "org/joda/time/Partial.java#217#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 3,
    "locations": [
      "org/joda/time/MutableDateTime.java#639#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#640#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#660#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#661#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#681#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#682#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#702#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#703#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#723#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#724#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#764#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#765#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#785#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#786#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#816#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#817#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#847#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#848#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#880#FAULT_OF_OMISSION",
      "org/joda/time/MutableDateTime.java#881#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 2,
    "locations": [
      "org/joda/time/Partial.java#218#                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {",
      "org/joda/time/Partial.java#449#FAULT_OF_OMISSION",
      "org/joda/time/field/UnsupportedDurationField.java#227#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 5,
    "locations": [
      "org/joda/time/Period.java#1628#            years = FieldUtils.safeAdd(years, months / 12);",
      "org/joda/time/Period.java#1629#            months = months % 12;",
      "org/joda/time/Period.java#1630#            if (years != 0) {",
      "org/joda/time/Period.java#1631#                result = result.withYears(years);",
      "org/joda/time/Period.java#1633#            if (months != 0) {",
      "org/joda/time/Period.java#1634#                result = result.withMonths(months);"
    ]
  },
  {
    "project": "Time",
    "bugId": 7,
    "locations": [
      "org/joda/time/format/DateTimeFormatter.java#710#        int defaultYear = chrono.year().get(instantLocal);",
      "org/joda/time/format/DateTimeFormatter.java#708#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 6,
    "locations": [
      "org/joda/time/chrono/GJChronology.java#196#FAULT_OF_OMISSION",
      "org/joda/time/chrono/GJChronology.java#979#FAULT_OF_OMISSION",
      "org/joda/time/chrono/GJChronology.java#1001#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 9,
    "locations": [
      "org/joda/time/DateTimeZone.java#263#            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
      "org/joda/time/DateTimeZone.java#265#                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
      "org/joda/time/DateTimeZone.java#267#                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
      "org/joda/time/DateTimeZone.java#258#FAULT_OF_OMISSION",
      "org/joda/time/DateTimeZone.java#283#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 8,
    "locations": [
      "org/joda/time/DateTimeZone.java#279#        if (minutesOffset < 0 || minutesOffset > 59) {",
      "org/joda/time/DateTimeZone.java#286#                minutesOffset = hoursInMinutes - minutesOffset;",
      "org/joda/time/DateTimeZone.java#282#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 47,
    "locations": [
      "org/apache/commons/math/complex/Complex.java#256#        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {",
      "org/apache/commons/math/complex/Complex.java#257#            return NaN;",
      "org/apache/commons/math/complex/Complex.java#293#            return NaN;",
      "org/apache/commons/math/complex/Complex.java#82#FAULT_OF_OMISSION",
      "org/apache/commons/math/complex/Complex.java#105#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 49,
    "locations": [
      "org/apache/commons/math/linear/OpenMapRealVector.java#345#        Iterator iter = res.entries.iterator();",
      "org/apache/commons/math/linear/OpenMapRealVector.java#358#        Iterator iter = res.entries.iterator();",
      "org/apache/commons/math/linear/OpenMapRealVector.java#370#        Iterator iter = res.entries.iterator();",
      "org/apache/commons/math/linear/OpenMapRealVector.java#383#        Iterator iter = res.entries.iterator();"
    ]
  },
  {
    "project": "Time",
    "bugId": 10,
    "locations": [
      "org/joda/time/base/BaseSingleFieldPeriod.java#104#        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));",
      "org/joda/time/base/BaseSingleFieldPeriod.java#52#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 40,
    "locations": [
      "org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#235#                targetY = -REDUCTION_FACTOR * yB;",
      "org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java#238#                targetY = -REDUCTION_FACTOR * yA;"
    ]
  },
  {
    "project": "Math",
    "bugId": 42,
    "locations": [
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#413#          if (basicRows.contains(basicRow)) {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#410#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 43,
    "locations": [
      "org/apache/commons/math/stat/descriptive/SummaryStatistics.java#158#        if (!(meanImpl instanceof Mean)) {",
      "org/apache/commons/math/stat/descriptive/SummaryStatistics.java#161#        if (!(varianceImpl instanceof Variance)) {",
      "org/apache/commons/math/stat/descriptive/SummaryStatistics.java#164#        if (!(geoMeanImpl instanceof GeometricMean)) {"
    ]
  },
  {
    "project": "Math",
    "bugId": 44,
    "locations": [
      "org/apache/commons/math/ode/AbstractIntegrator.java#280#            resetOccurred = false;",
      "org/apache/commons/math/ode/AbstractIntegrator.java#334#FAULT_OF_OMISSION",
      "org/apache/commons/math/ode/AbstractIntegrator.java#343#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 46,
    "locations": [
      "org/apache/commons/math/complex/Complex.java#260#            return isZero ? NaN : INF;",
      "org/apache/commons/math/complex/Complex.java#297#            return isZero ? NaN : INF;"
    ]
  },
  {
    "project": "Math",
    "bugId": 7,
    "locations": [
      "org/apache/commons/math3/ode/AbstractIntegrator.java#346#                currentEvent.stepAccepted(eventT, eventY);",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#347#                isLastStep = currentEvent.stop();",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#357#                    for (final EventState remaining : occuringEvents) {",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#358#                        remaining.stepAccepted(eventT, eventY);",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#359#                    }",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#363#                boolean needReset = currentEvent.reset(eventT, eventY);",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#370#                    for (final EventState remaining : occuringEvents) {",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#371#                        remaining.stepAccepted(eventT, eventY);",
      "org/apache/commons/math3/ode/AbstractIntegrator.java#372#                    }"
    ]
  },
  {
    "project": "Math",
    "bugId": 8,
    "locations": [
      "org/apache/commons/math3/distribution/DiscreteDistribution.java#181#    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {",
      "org/apache/commons/math3/distribution/DiscreteDistribution.java#187#        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);"
    ]
  },
  {
    "project": "Lang",
    "bugId": 10,
    "locations": [
      "org/apache/commons/lang3/time/FastDateParser.java#304#        boolean wasWhite= false;",
      "org/apache/commons/lang3/time/FastDateParser.java#307#            if(Character.isWhitespace(c)) {",
      "org/apache/commons/lang3/time/FastDateParser.java#308#                if(!wasWhite) {",
      "org/apache/commons/lang3/time/FastDateParser.java#309#                    wasWhite= true;",
      "org/apache/commons/lang3/time/FastDateParser.java#310#                    regex.append(\"\\\\s*+\");",
      "org/apache/commons/lang3/time/FastDateParser.java#311#                }",
      "org/apache/commons/lang3/time/FastDateParser.java#312#                continue;",
      "org/apache/commons/lang3/time/FastDateParser.java#313#            }",
      "org/apache/commons/lang3/time/FastDateParser.java#314#            wasWhite= false;"
    ]
  },
  {
    "project": "Math",
    "bugId": 6,
    "locations": [
      "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java#191#        int iter = 0;",
      "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java#193#            ++iter;",
      "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java#227#                    stop = checker.converged(iter, previous, current);",
      "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#214#        int iter = 0;",
      "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#217#            ++iter;",
      "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#223#                if (checker.converged(iter, previous, current)) {",
      "org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java#277#            if (iter % n == 0 ||",
      "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java#158#            if (iteration > 0) {",
      "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java#175#\t\t\t++iteration;",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java#106#        int iter = 0;",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java#108#            ++iter;",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java#160#                converged = checker.converged(iter, previous, current);",
      "org/apache/commons/math3/optim/BaseOptimizer.java#51#        iterations = new Incrementor(0, new MaxIterCallback());",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java#322#        int iter = 0;",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java#325#            ++iter;",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java#489#                        if (checker.converged(iter, previous, current)) {",
      "org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java#388#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 60,
    "locations": [
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#126#        try {",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#129#        } catch (MaxIterationsExceededException ex) {",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#130#            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#131#                return 0;",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#132#            } else if (x > (mean + 20 * standardDeviation)) {",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#133#                return 1;",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#134#            } else {",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#135#                throw ex;",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#136#            }",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#137#        }"
    ]
  },
  {
    "project": "Math",
    "bugId": 50,
    "locations": [
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#187#                    if (x == x1) {",
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#188#                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#189#                        f0 = computeObjectiveValue(x0);",
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#190#                    }"
    ]
  },
  {
    "project": "Math",
    "bugId": 51,
    "locations": [
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#185#FAULT_OF_OMISSION",
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#187#FAULT_OF_OMISSION",
      "org/apache/commons/math/analysis/solvers/BaseSecantSolver.java#189#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 52,
    "locations": [
      "org/apache/commons/math/geometry/euclidean/threed/Rotation.java#344#  if (c == 0) {",
      "org/apache/commons/math/geometry/euclidean/threed/Rotation.java#353#    if (c == 0) {",
      "org/apache/commons/math/geometry/euclidean/threed/Rotation.java#359#      if (c == 0) {"
    ]
  },
  {
    "project": "Math",
    "bugId": 3,
    "locations": [
      "org/apache/commons/math3/util/MathArrays.java#821#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/MathArrays.java#822#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 54,
    "locations": [
      "org/apache/commons/math/dfp/Dfp.java#2319#        if (lessThan(getZero())) {",
      "org/apache/commons/math/dfp/Dfp.java#273#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 55,
    "locations": [
      "org/apache/commons/math/geometry/Vector3D.java#473#      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",
      "org/apache/commons/math/geometry/Vector3D.java#459#FAULT_OF_OMISSION",
      "org/apache/commons/math/geometry/Vector3D.java#462#FAULT_OF_OMISSION",
      "org/apache/commons/math/geometry/Vector3D.java#470#FAULT_OF_OMISSION",
      "org/apache/commons/math/geometry/Vector3D.java#471#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 4,
    "locations": [
      "org/apache/commons/math3/geometry/euclidean/threed/SubLine.java#114#FAULT_OF_OMISSION",
      "org/apache/commons/math3/geometry/euclidean/twod/SubLine.java#118#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 56,
    "locations": [
      "org/apache/commons/math/util/MultidimensionalCounter.java#237#        int idx = 1;",
      "org/apache/commons/math/util/MultidimensionalCounter.java#238#        while (count < index) {",
      "org/apache/commons/math/util/MultidimensionalCounter.java#239#            count += idx;",
      "org/apache/commons/math/util/MultidimensionalCounter.java#240#            ++idx;",
      "org/apache/commons/math/util/MultidimensionalCounter.java#241#        }",
      "org/apache/commons/math/util/MultidimensionalCounter.java#242#        --idx;",
      "org/apache/commons/math/util/MultidimensionalCounter.java#243#        indices[last] = idx;"
    ]
  },
  {
    "project": "Math",
    "bugId": 1,
    "locations": [
      "org/apache/commons/math3/fraction/Fraction.java#215#FAULT_OF_OMISSION",
      "org/apache/commons/math3/fraction/BigFraction.java#306#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 20,
    "locations": [
      "org/apache/commons/lang3/StringUtils.java#3298#        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);",
      "org/apache/commons/lang3/StringUtils.java#3383#        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());"
    ]
  },
  {
    "project": "Lang",
    "bugId": 22,
    "locations": [
      "org/apache/commons/lang3/math/Fraction.java#584#        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {",
      "org/apache/commons/lang3/math/Fraction.java#583#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 90,
    "locations": [
      "com/google/javascript/jscomp/FunctionTypeBuilder.java#184#      if (!type.isSubtype(",
      "com/google/javascript/rhino/jstype/FunctionType.java#880#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 95,
    "locations": [
      "com/google/javascript/jscomp/TypedScopeCreator.java#899#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypedScopeCreator.java#902#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 96,
    "locations": [
      "com/google/javascript/jscomp/TypeCheck.java#1409#           parameters.hasNext()) {",
      "com/google/javascript/jscomp/TypeCheck.java#1412#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypeCheck.java#1413#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 94,
    "locations": [
      "com/google/javascript/jscomp/NodeUtil.java#329#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/NodeUtil.java#333#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/NodeUtil.java#337#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 25,
    "locations": [
      "org/apache/commons/math3/optimization/fitting/HarmonicFitter.java#323#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/fitting/HarmonicFitter.java#325#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 99,
    "locations": [
      "com/google/javascript/jscomp/CheckGlobalThis.java#129#          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {",
      "com/google/javascript/jscomp/CheckGlobalThis.java#92#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/CheckGlobalThis.java#125#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/CheckGlobalThis.java#132#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 26,
    "locations": [
      "org/apache/commons/math3/fraction/Fraction.java#181#        if (a0 > overflow) {",
      "org/apache/commons/math3/fraction/Fraction.java#209#            if ((p2 > overflow) || (q2 > overflow)) {"
    ]
  },
  {
    "project": "Closure",
    "bugId": 98,
    "locations": [
      "com/google/javascript/jscomp/ReferenceCollectingCallback.java#361#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ReferenceCollectingCallback.java#545#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ReferenceCollectingCallback.java#549#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ReferenceCollectingCallback.java#561#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ReferenceCollectingCallback.java#562#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 28,
    "locations": [
      "org/apache/commons/math3/optimization/linear/SimplexSolver.java#119#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/linear/SimplexSolver.java#128#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/linear/SimplexSolver.java#138#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/linear/SimplexSolver.java#152#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 29,
    "locations": [
      "org/apache/commons/math3/linear/OpenMapRealVector.java#349#        Iterator iter = entries.iterator();",
      "org/apache/commons/math3/linear/OpenMapRealVector.java#350#        while (iter.hasNext()) {",
      "org/apache/commons/math3/linear/OpenMapRealVector.java#351#            iter.advance();",
      "org/apache/commons/math3/linear/OpenMapRealVector.java#352#            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",
      "org/apache/commons/math3/linear/OpenMapRealVector.java#374#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 17,
    "locations": [
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#83#        int len = Character.codePointCount(input, 0, input.length());",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#90#            else {",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#94#                    if (pos < len - 2) {",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#96#                    } else {",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#97#                        pos++;",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#98#                    }",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#99#                }",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#100#                pos--;",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#102#            pos++;",
      "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#89#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 19,
    "locations": [
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#40#        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {",
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#54#            while(input.charAt(end) != ';') ",
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#80#            return 2 + (end - start) + (isHex ? 1 : 0) + 1;",
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#50#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#79#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 18,
    "locations": [
      "org/apache/commons/lang3/time/FastDateFormat.java#495#                if (tokenLen >= 4) {",
      "org/apache/commons/lang3/time/FastDateFormat.java#496#                    rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "org/apache/commons/lang3/time/FastDateFormat.java#497#                } else {",
      "org/apache/commons/lang3/time/FastDateFormat.java#499#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 13,
    "locations": [
      "org/apache/commons/lang3/SerializationUtils.java#239#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/SerializationUtils.java#252#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/SerializationUtils.java#268#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/SerializationUtils.java#269#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 21,
    "locations": [
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#69#        int[] swap  = new int[order];",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#79#            swap[r] = r;",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#82#                int isi = index[swap[i]];",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#83#                if (c[ii][ii] > c[isi][isi]) {",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#84#                    swap[r] = i;",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#90#            if (swap[r] != r) {",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#91#                int tmp = index[r];",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#92#                index[r] = index[swap[r]];",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#93#                index[swap[r]] = tmp;",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#128#                    c[ii][ii] -= e * e;",
      "org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java#124#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 22,
    "locations": [
      "org/apache/commons/math3/distribution/UniformRealDistribution.java#184#        return false;",
      "org/apache/commons/math3/distribution/FDistribution.java#275#        return true;"
    ]
  },
  {
    "project": "Lang",
    "bugId": 12,
    "locations": [
      "org/apache/commons/lang3/RandomStringUtils.java#230#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/RandomStringUtils.java#232#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/RandomStringUtils.java#238#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 15,
    "locations": [
      "org/apache/commons/lang3/reflect/TypeUtils.java#219#        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {",
      "org/apache/commons/lang3/reflect/TypeUtils.java#220#            Type toTypeArg = entry.getValue();",
      "org/apache/commons/lang3/reflect/TypeUtils.java#221#            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());",
      "org/apache/commons/lang3/reflect/TypeUtils.java#675#        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {"
    ]
  },
  {
    "project": "Math",
    "bugId": 23,
    "locations": [
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#237#                        return best(current, previous, isMinim);",
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#274#                return",
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#151#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#234#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#277#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 24,
    "locations": [
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#230#                        return current;",
      "org/apache/commons/math3/optimization/univariate/BrentOptimizer.java#267#                return current;"
    ]
  },
  {
    "project": "Lang",
    "bugId": 14,
    "locations": [
      "org/apache/commons/lang3/StringUtils.java#788#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#789#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 31,
    "locations": [
      "org/apache/commons/lang3/StringUtils.java#1446#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1450#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1451#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1453#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 30,
    "locations": [
      "org/apache/commons/lang3/StringUtils.java#1443#    public static boolean containsAny(CharSequence cs, char[] searchChars) {",
      "org/apache/commons/lang3/StringUtils.java#1455#                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {",
      "org/apache/commons/lang3/StringUtils.java#1457#                        if (searchChars[j + 1] == cs.charAt(i + 1)) {",
      "org/apache/commons/lang3/StringUtils.java#1497#    public static boolean containsAny(CharSequence cs, String searchChars) {",
      "org/apache/commons/lang3/StringUtils.java#1576#            if (searchChars.indexOf(ch) < 0) {",
      "org/apache/commons/lang3/StringUtils.java#1376#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1377#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1381#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1382#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1383#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1533#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1534#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1539#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1540#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1578#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1678#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1679#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1683#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1684#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/StringUtils.java#1686#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 32,
    "locations": [
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#104#    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#105#        @Override",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#106#        protected Set<IDKey> initialValue() {",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#107#            return new HashSet<IDKey>();",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#108#        }",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#109#    };",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#152#        return getRegistry().contains(new IDKey(value));",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#538#        getRegistry().remove(new IDKey(value));",
      "org/apache/commons/lang3/builder/HashCodeBuilder.java#522#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 106,
    "locations": [
      "org/apache/commons/math/fraction/ProperFractionFormat.java#165#FAULT_OF_OMISSION",
      "org/apache/commons/math/fraction/ProperFractionFormat.java#166#FAULT_OF_OMISSION",
      "org/apache/commons/math/fraction/ProperFractionFormat.java#200#FAULT_OF_OMISSION",
      "org/apache/commons/math/fraction/ProperFractionFormat.java#201#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 36,
    "locations": [
      "org/apache/commons/math/fraction/BigFraction.java#686#FAULT_OF_OMISSION",
      "org/apache/commons/math/fraction/BigFraction.java#688#FAULT_OF_OMISSION",
      "org/apache/commons/math/fraction/BigFraction.java#733#FAULT_OF_OMISSION",
      "org/apache/commons/math/fraction/BigFraction.java#735#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 37,
    "locations": [
      "org/apache/commons/math/complex/Complex.java#1018#        if (isNaN) {",
      "org/apache/commons/math/complex/Complex.java#1063#        if (isNaN) {",
      "org/apache/commons/math/complex/Complex.java#1021#FAULT_OF_OMISSION",
      "org/apache/commons/math/complex/Complex.java#1065#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 38,
    "locations": [
      "org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1660#                    throw new PathIsExploredException(); // XXX",
      "org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1662#                final int iptMinus1 = ipt;",
      "org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1663#                final int jptMinus1 = jpt;",
      "org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java#1752#                throw new PathIsExploredException(); // XXX"
    ]
  },
  {
    "project": "Math",
    "bugId": 103,
    "locations": [
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#109#FAULT_OF_OMISSION",
      "org/apache/commons/math/distribution/NormalDistributionImpl.java#111#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 28,
    "locations": [
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#63#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java#64#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 27,
    "locations": [
      "org/apache/commons/lang3/math/NumberUtils.java#479#                if (expPos < decPos) {",
      "org/apache/commons/lang3/math/NumberUtils.java#489#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 102,
    "locations": [
      "org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#74#FAULT_OF_OMISSION",
      "org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#77#FAULT_OF_OMISSION",
      "org/apache/commons/math/stat/inference/ChiSquareTestImpl.java#79#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 31,
    "locations": [
      "org/apache/commons/math3/util/ContinuedFraction.java#134#        double p0 = 1.0;",
      "org/apache/commons/math3/util/ContinuedFraction.java#135#        double q1 = 1.0;",
      "org/apache/commons/math3/util/ContinuedFraction.java#143#            double cN = a * hPrev + b * p0;",
      "org/apache/commons/math3/util/ContinuedFraction.java#144#            double q2 = a * q1 + b * dPrev;",
      "org/apache/commons/math3/util/ContinuedFraction.java#145#            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {",
      "org/apache/commons/math3/util/ContinuedFraction.java#146#                double scaleFactor = 1d;",
      "org/apache/commons/math3/util/ContinuedFraction.java#147#                double lastScaleFactor = 1d;",
      "org/apache/commons/math3/util/ContinuedFraction.java#148#                final int maxPower = 5;",
      "org/apache/commons/math3/util/ContinuedFraction.java#149#                final double scale = FastMath.max(a,b);",
      "org/apache/commons/math3/util/ContinuedFraction.java#150#                if (scale <= 0) {  // Can't scale",
      "org/apache/commons/math3/util/ContinuedFraction.java#151#                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);",
      "org/apache/commons/math3/util/ContinuedFraction.java#152#                }",
      "org/apache/commons/math3/util/ContinuedFraction.java#153#                for (int i = 0; i < maxPower; i++) {",
      "org/apache/commons/math3/util/ContinuedFraction.java#154#                    lastScaleFactor = scaleFactor;",
      "org/apache/commons/math3/util/ContinuedFraction.java#155#                    scaleFactor *= scale;",
      "org/apache/commons/math3/util/ContinuedFraction.java#156#                    if (a != 0.0 && a > b) {",
      "org/apache/commons/math3/util/ContinuedFraction.java#157#                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);",
      "org/apache/commons/math3/util/ContinuedFraction.java#158#                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);",
      "org/apache/commons/math3/util/ContinuedFraction.java#159#                    } else if (b != 0) {",
      "org/apache/commons/math3/util/ContinuedFraction.java#160#                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;",
      "org/apache/commons/math3/util/ContinuedFraction.java#161#                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;",
      "org/apache/commons/math3/util/ContinuedFraction.java#162#                    }",
      "org/apache/commons/math3/util/ContinuedFraction.java#163#                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {",
      "org/apache/commons/math3/util/ContinuedFraction.java#164#                        break;",
      "org/apache/commons/math3/util/ContinuedFraction.java#165#                    }",
      "org/apache/commons/math3/util/ContinuedFraction.java#166#                }",
      "org/apache/commons/math3/util/ContinuedFraction.java#169#            final double deltaN = cN / q2 / cPrev;",
      "org/apache/commons/math3/util/ContinuedFraction.java#170#            hN = cPrev * deltaN;",
      "org/apache/commons/math3/util/ContinuedFraction.java#185#            dPrev = q1;",
      "org/apache/commons/math3/util/ContinuedFraction.java#186#            cPrev = cN / q2;",
      "org/apache/commons/math3/util/ContinuedFraction.java#187#            p0 = hPrev;",
      "org/apache/commons/math3/util/ContinuedFraction.java#188#            hPrev = cN;",
      "org/apache/commons/math3/util/ContinuedFraction.java#189#            q1 = q2;"
    ]
  },
  {
    "project": "Math",
    "bugId": 100,
    "locations": [
      "org/apache/commons/math/estimation/AbstractEstimator.java#166#        final int cols = problem.getAllParameters().length;",
      "org/apache/commons/math/estimation/AbstractEstimator.java#202#        int p = problem.getAllParameters().length;",
      "org/apache/commons/math/estimation/AbstractEstimator.java#207#        double[] errors = new double[problem.getAllParameters().length];"
    ]
  },
  {
    "project": "Lang",
    "bugId": 23,
    "locations": [
      "org/apache/commons/lang3/text/ExtendedMessageFormat.java#73#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/text/ExtendedMessageFormat.java#263#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/text/ExtendedMessageFormat.java#269#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 35,
    "locations": [
      "org/apache/commons/math3/genetics/ElitisticListPopulation.java#51#        this.elitismRate = elitismRate;",
      "org/apache/commons/math3/genetics/ElitisticListPopulation.java#65#        this.elitismRate = elitismRate;"
    ]
  },
  {
    "project": "Lang",
    "bugId": 42,
    "locations": [
      "org/apache/commons/lang/Entities.java#828#            char c = str.charAt(i);",
      "org/apache/commons/lang/Entities.java#831#                if (c > 0x7F) {"
    ]
  },
  {
    "project": "Lang",
    "bugId": 41,
    "locations": [
      "org/apache/commons/lang/ClassUtils.java#203#        return out;",
      "org/apache/commons/lang/ClassUtils.java#245#        if (className == null) {",
      "org/apache/commons/lang/ClassUtils.java#191#FAULT_OF_OMISSION",
      "org/apache/commons/lang/ClassUtils.java#193#FAULT_OF_OMISSION",
      "org/apache/commons/lang/ClassUtils.java#194#FAULT_OF_OMISSION",
      "org/apache/commons/lang/ClassUtils.java#195#FAULT_OF_OMISSION",
      "org/apache/commons/lang/ClassUtils.java#250#FAULT_OF_OMISSION",
      "org/apache/commons/lang/ClassUtils.java#251#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 90,
    "locations": [
      "org/apache/commons/math/stat/Frequency.java#110#FAULT_OF_OMISSION",
      "org/apache/commons/math/stat/Frequency.java#121#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 91,
    "locations": [
      "org/apache/commons/math/fraction/Fraction.java#259#        double nOd = doubleValue();",
      "org/apache/commons/math/fraction/Fraction.java#260#        double dOn = object.doubleValue();"
    ]
  },
  {
    "project": "Math",
    "bugId": 92,
    "locations": [
      "org/apache/commons/math/util/MathUtils.java#184#        long result = Math.round(binomialCoefficientDouble(n, k));",
      "org/apache/commons/math/util/MathUtils.java#185#        if (result == Long.MAX_VALUE) {",
      "org/apache/commons/math/util/MathUtils.java#186#            throw new ArithmeticException(",
      "org/apache/commons/math/util/MathUtils.java#187#                \"result too large to represent in a long integer\");",
      "org/apache/commons/math/util/MathUtils.java#188#        }",
      "org/apache/commons/math/util/MathUtils.java#236#        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",
      "org/apache/commons/math/util/MathUtils.java#190#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#196#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#197#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#199#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#205#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#208#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#234#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#235#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#277#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#282#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 93,
    "locations": [
      "org/apache/commons/math/util/MathUtils.java#345#        long result = Math.round(factorialDouble(n));",
      "org/apache/commons/math/util/MathUtils.java#346#        if (result == Long.MAX_VALUE) {",
      "org/apache/commons/math/util/MathUtils.java#377#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#396#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 83,
    "locations": [
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#292#        int start = getNumObjectiveFunctions();",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#341#      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#345#          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);"
    ]
  },
  {
    "project": "Closure",
    "bugId": 9,
    "locations": [
      "com/google/javascript/jscomp/ProcessCommonJSModules.java#183#      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));",
      "com/google/javascript/jscomp/ProcessCommonJSModules.java#119#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 84,
    "locations": [
      "org/apache/commons/math/optimization/direct/MultiDirectional.java#64#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/direct/MultiDirectional.java#92#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/direct/MultiDirectional.java#94#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 8,
    "locations": [
      "com/google/javascript/jscomp/CollapseVariableDeclarations.java#204#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/CollapseVariableDeclarations.java#208#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 7,
    "locations": [
      "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#613#        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;",
      "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#615#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#616#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 6,
    "locations": [
      "com/google/javascript/jscomp/TypeValidator.java#366#      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {",
      "com/google/javascript/jscomp/TypeValidator.java#367#        registerMismatch(rightType, leftType, null);",
      "com/google/javascript/jscomp/TypeValidator.java#368#      } else {",
      "com/google/javascript/jscomp/TypeValidator.java#385#      }",
      "com/google/javascript/jscomp/TypeValidator.java#405#      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {",
      "com/google/javascript/jscomp/TypeValidator.java#406#        registerMismatch(rightType, leftType, null);",
      "com/google/javascript/jscomp/TypeValidator.java#407#      } else {",
      "com/google/javascript/jscomp/TypeValidator.java#409#      }"
    ]
  },
  {
    "project": "Math",
    "bugId": 86,
    "locations": [
      "org/apache/commons/math/linear/CholeskyDecompositionImpl.java#114#            if (lTData[i][i] < absolutePositivityThreshold) {",
      "org/apache/commons/math/linear/CholeskyDecompositionImpl.java#115#                throw new NotPositiveDefiniteMatrixException();",
      "org/apache/commons/math/linear/CholeskyDecompositionImpl.java#116#            }",
      "org/apache/commons/math/linear/CholeskyDecompositionImpl.java#137#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 87,
    "locations": [
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#275#            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#276#                if (row == null) {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#278#                } else {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#280#                }"
    ]
  },
  {
    "project": "Lang",
    "bugId": 35,
    "locations": [
      "org/apache/commons/lang3/ArrayUtils.java#3295#            type = Object.class;",
      "org/apache/commons/lang3/ArrayUtils.java#3574#            return (T[]) new Object[] { null };"
    ]
  },
  {
    "project": "Math",
    "bugId": 88,
    "locations": [
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#336#            if (basicRow != null) {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#337#                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#338#                    if (tableau.getEntry(basicRow, j) == 1) {",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#339#                         coefficients[i] = 0;",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#340#                    }",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#341#                }",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#329#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#331#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/linear/SimplexTableau.java#333#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 34,
    "locations": [
      "org/apache/commons/lang3/builder/ToStringStyle.java#148#        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();",
      "org/apache/commons/lang3/builder/ToStringStyle.java#164#        return m.containsKey(value);"
    ]
  },
  {
    "project": "Closure",
    "bugId": 4,
    "locations": [
      "com/google/javascript/rhino/jstype/NamedType.java#190#    if (detectImplicitPrototypeCycle()) {",
      "com/google/javascript/rhino/jstype/NamedType.java#202#    if (detectImplicitPrototypeCycle()) {"
    ]
  },
  {
    "project": "Lang",
    "bugId": 37,
    "locations": [
      "org/apache/commons/lang3/ArrayUtils.java#2962#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/ArrayUtils.java#2963#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/ArrayUtils.java#2964#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 3,
    "locations": [
      "com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#155#      if (c.canInline()) {",
      "com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#280#    private boolean canInline() {",
      "com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#375#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 89,
    "locations": [
      "org/apache/commons/math/stat/Frequency.java#110#FAULT_OF_OMISSION",
      "org/apache/commons/math/stat/Frequency.java#111#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 2,
    "locations": [
      "com/google/javascript/jscomp/TypeCheck.java#1572#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypeCheck.java#1574#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypeCheck.java#1575#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 36,
    "locations": [
      "org/apache/commons/lang3/math/NumberUtils.java#491#        if (!Character.isDigit(lastChar)) {",
      "org/apache/commons/lang3/math/NumberUtils.java#1387#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 4,
    "locations": [
      "org/jfree/chart/plot/XYPlot.java#4493#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/XYPlot.java#4501#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 53,
    "locations": [
      "org/apache/commons/lang/time/DateUtils.java#645#            }",
      "org/apache/commons/lang/time/DateUtils.java#654#            }",
      "org/apache/commons/lang/time/DateUtils.java#643#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#652#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 55,
    "locations": [
      "org/apache/commons/lang/time/StopWatch.java#118#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/StopWatch.java#119#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 5,
    "locations": [
      "org/jfree/data/xy/XYSeries.java#548#        if (index >= 0 && !this.allowDuplicateXValues) {",
      "org/jfree/data/xy/XYSeries.java#544#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 2,
    "locations": [
      "org/jfree/data/general/DatasetUtilities.java#755#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#757#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#759#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#761#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#1242#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#1244#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#1246#FAULT_OF_OMISSION",
      "org/jfree/data/general/DatasetUtilities.java#1248#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 50,
    "locations": [
      "org/apache/commons/lang/time/FastDateFormat.java#285#        if (locale != null) {",
      "org/apache/commons/lang/time/FastDateFormat.java#286#            key = new Pair(key, locale);",
      "org/apache/commons/lang/time/FastDateFormat.java#292#            if (locale == null) {",
      "org/apache/commons/lang/time/FastDateFormat.java#293#                locale = Locale.getDefault();",
      "org/apache/commons/lang/time/FastDateFormat.java#294#            }",
      "org/apache/commons/lang/time/FastDateFormat.java#465#        if (locale != null) {",
      "org/apache/commons/lang/time/FastDateFormat.java#466#            key = new Pair(key, locale);",
      "org/apache/commons/lang/time/FastDateFormat.java#471#            if (locale == null) {",
      "org/apache/commons/lang/time/FastDateFormat.java#472#                locale = Locale.getDefault();",
      "org/apache/commons/lang/time/FastDateFormat.java#473#            }",
      "org/apache/commons/lang/time/FastDateFormat.java#289#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/FastDateFormat.java#468#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 7,
    "locations": [
      "org/jfree/data/time/TimePeriodValues.java#300#            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()",
      "org/jfree/data/time/TimePeriodValues.java#302#            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()"
    ]
  },
  {
    "project": "Math",
    "bugId": 95,
    "locations": [
      "org/apache/commons/math/distribution/FDistributionImpl.java#144#        double ret;",
      "org/apache/commons/math/distribution/FDistributionImpl.java#146#FAULT_OF_OMISSION",
      "org/apache/commons/math/distribution/FDistributionImpl.java#148#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 97,
    "locations": [
      "org/apache/commons/math/analysis/BrentSolver.java#138#        if (sign >= 0) {",
      "org/apache/commons/math/analysis/BrentSolver.java#145#        } else {",
      "org/apache/commons/math/analysis/BrentSolver.java#140#FAULT_OF_OMISSION",
      "org/apache/commons/math/analysis/BrentSolver.java#148#FAULT_OF_OMISSION",
      "org/apache/commons/math/analysis/BrentSolver.java#149#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 98,
    "locations": [
      "org/apache/commons/math/linear/BigMatrixImpl.java#991#        final BigDecimal[] out = new BigDecimal[v.length];",
      "org/apache/commons/math/linear/RealMatrixImpl.java#779#        final double[] out = new double[v.length];"
    ]
  },
  {
    "project": "Lang",
    "bugId": 46,
    "locations": [
      "org/apache/commons/lang/StringEscapeUtils.java#86#        return escapeJavaStyleString(str, false);",
      "org/apache/commons/lang/StringEscapeUtils.java#102#        escapeJavaStyleString(out, str, false);",
      "org/apache/commons/lang/StringEscapeUtils.java#127#        return escapeJavaStyleString(str, true);",
      "org/apache/commons/lang/StringEscapeUtils.java#143#        escapeJavaStyleString(out, str, true);",
      "org/apache/commons/lang/StringEscapeUtils.java#154#    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {",
      "org/apache/commons/lang/StringEscapeUtils.java#160#            escapeJavaStyleString(writer, str, escapeSingleQuotes);",
      "org/apache/commons/lang/StringEscapeUtils.java#178#    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {",
      "org/apache/commons/lang/StringEscapeUtils.java#244#FAULT_OF_OMISSION",
      "org/apache/commons/lang/StringEscapeUtils.java#245#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 99,
    "locations": [
      "org/apache/commons/math/util/MathUtils.java#543#FAULT_OF_OMISSION",
      "org/apache/commons/math/util/MathUtils.java#714#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 48,
    "locations": [
      "org/apache/commons/lang/builder/EqualsBuilder.java#380#FAULT_OF_OMISSION",
      "org/apache/commons/lang/builder/EqualsBuilder.java#382#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 47,
    "locations": [
      "org/apache/commons/lang/text/StrBuilder.java#1186#FAULT_OF_OMISSION",
      "org/apache/commons/lang/text/StrBuilder.java#1230#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 64,
    "locations": [
      "org/apache/commons/lang/enums/ValuedEnum.java#183#FAULT_OF_OMISSION",
      "org/apache/commons/lang/enums/ValuedEnum.java#192#FAULT_OF_OMISSION",
      "org/apache/commons/lang/enums/ValuedEnum.java#193#FAULT_OF_OMISSION",
      "org/apache/commons/lang/enums/ValuedEnum.java#194#FAULT_OF_OMISSION",
      "org/apache/commons/lang/enums/ValuedEnum.java#195#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 63,
    "locations": [
      "org/apache/commons/lang/time/DurationFormatUtils.java#306#            days += 31;",
      "org/apache/commons/lang/time/DurationFormatUtils.java#318#        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#319#        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#320#        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#321#        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#322#        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#323#        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#324#        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#431#    }",
      "org/apache/commons/lang/time/DurationFormatUtils.java#432#    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {",
      "org/apache/commons/lang/time/DurationFormatUtils.java#433#        end.add( field, -1 * difference );",
      "org/apache/commons/lang/time/DurationFormatUtils.java#434#        int endValue = end.get(field);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#435#        int startValue = start.get(field);",
      "org/apache/commons/lang/time/DurationFormatUtils.java#436#        if (endValue < startValue) {",
      "org/apache/commons/lang/time/DurationFormatUtils.java#437#            int newdiff = startValue - endValue;",
      "org/apache/commons/lang/time/DurationFormatUtils.java#438#            end.add( field, newdiff );",
      "org/apache/commons/lang/time/DurationFormatUtils.java#439#            return newdiff;",
      "org/apache/commons/lang/time/DurationFormatUtils.java#440#        } else {",
      "org/apache/commons/lang/time/DurationFormatUtils.java#441#            return 0;",
      "org/apache/commons/lang/time/DurationFormatUtils.java#442#        }",
      "org/apache/commons/lang/time/DurationFormatUtils.java#313#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 65,
    "locations": [
      "org/apache/commons/lang/time/DateUtils.java#624#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#631#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#633#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#635#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#637#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#639#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#709#FAULT_OF_OMISSION",
      "org/apache/commons/lang/time/DateUtils.java#710#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 60,
    "locations": [
      "org/apache/commons/lang/text/StrBuilder.java#1673#        for (int i = 0; i < thisBuf.length; i++) {",
      "org/apache/commons/lang/text/StrBuilder.java#1730#        for (int i = startIndex; i < thisBuf.length; i++) {"
    ]
  },
  {
    "project": "Lang",
    "bugId": 62,
    "locations": [
      "org/apache/commons/lang/Entities.java#850#FAULT_OF_OMISSION",
      "org/apache/commons/lang/Entities.java#920#FAULT_OF_OMISSION",
      "org/apache/commons/lang/Entities.java#925#FAULT_OF_OMISSION",
      "org/apache/commons/lang/Entities.java#926#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 71,
    "locations": [
      "org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java#180#FAULT_OF_OMISSION",
      "org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#300#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 61,
    "locations": [
      "org/apache/commons/math/distribution/PoissonDistributionImpl.java#22#import org.apache.commons.math.MathRuntimeException;",
      "org/apache/commons/math/distribution/PoissonDistributionImpl.java#94#            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);"
    ]
  },
  {
    "project": "Math",
    "bugId": 62,
    "locations": [
      "org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#146#        return optimize(f, goal, min, max, 0);",
      "org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#160#                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);",
      "org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#161#                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);",
      "org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java#162#                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));"
    ]
  },
  {
    "project": "Math",
    "bugId": 64,
    "locations": [
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#278#            qTy(residuals);",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#316#                            sum += jacobian[i][pj] * residuals[i];",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#346#                determineLMParameter(oldRes, delta, diag, work1, work2, work3);",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#365#                current = new VectorialPointValuePair(point, objective);",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#442#                } else {",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#443#                    if (checker.converged(getIterations(), previous, current)) {",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#444#                        return current;",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#445#                    }",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#258#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#270#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#324#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#344#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#421#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#423#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#424#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#434#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 65,
    "locations": [
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#240#        double criterion = 0;",
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#241#        for (int i = 0; i < rows; ++i) {",
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#242#            final double residual = residuals[i];",
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#243#            criterion += residual * residual * residualsWeights[i];",
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#244#        }",
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#245#        return Math.sqrt(criterion / rows);",
      "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java#258#            chiSquare += residual * residual / residualsWeights[i];"
    ]
  },
  {
    "project": "Math",
    "bugId": 66,
    "locations": [
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#44#        setMaxEvaluations(Integer.MAX_VALUE);",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#46#        setAbsoluteAccuracy(1E-10);",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#47#        setRelativeAccuracy(1.0e-14);",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#57#        throw new UnsupportedOperationException();",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#58#    }",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#59#    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#60#        clearResult();",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#62#                        f, goalType, min, startValue, max,",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#65#    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#66#        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#67#    }",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#94#                            UnivariateRealFunction f,",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#95#                            GoalType goalType,",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#119#        double fx = computeObjectiveValue(f, x);",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#120#        if (goalType == GoalType.MAXIMIZE) {",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#126#        int count = 0;",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#127#        while (count < maximalIterationCount) {",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#200#                double fu = computeObjectiveValue(f, u);",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#201#                if (goalType == GoalType.MAXIMIZE) {",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#238#                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#241#            ++count;",
      "org/apache/commons/math/optimization/univariate/BrentOptimizer.java#243#        throw new MaxIterationsExceededException(maximalIterationCount);"
    ]
  },
  {
    "project": "Lang",
    "bugId": 56,
    "locations": [
      "org/apache/commons/lang/time/FastDateFormat.java#140#    private Rule[] mRules;",
      "org/apache/commons/lang/time/FastDateFormat.java#144#    private int mMaxLengthEstimate;",
      "org/apache/commons/lang/time/FastDateFormat.java#1022#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 67,
    "locations": [
      "org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java#92#        return optimizer.getFunctionValue();",
      "org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java#97#        return optimizer.getResult();"
    ]
  },
  {
    "project": "Lang",
    "bugId": 58,
    "locations": [
      "org/apache/commons/lang/math/NumberUtils.java#454#                        && isDigits(numeric.substring(1))",
      "org/apache/commons/lang/math/NumberUtils.java#455#                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {"
    ]
  },
  {
    "project": "Math",
    "bugId": 68,
    "locations": [
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#303#                return new VectorialPointValuePair(point, objective);",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#419#                        return new VectorialPointValuePair(point, objective);",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#166#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#247#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#252#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#345#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#413#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#414#FAULT_OF_OMISSION",
      "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java#421#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 81,
    "locations": [
      "org/apache/commons/math/linear/EigenDecompositionImpl.java#905#                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {",
      "org/apache/commons/math/linear/EigenDecompositionImpl.java#906#                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&",
      "org/apache/commons/math/linear/EigenDecompositionImpl.java#1543#                if (end - start > 2) {",
      "org/apache/commons/math/linear/EigenDecompositionImpl.java#603#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 72,
    "locations": [
      "org/apache/commons/math/analysis/solvers/BrentSolver.java#115#            setResult(yMin, 0);",
      "org/apache/commons/math/analysis/solvers/BrentSolver.java#127#            setResult(yMax, 0);"
    ]
  },
  {
    "project": "Math",
    "bugId": 74,
    "locations": [
      "org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#245#          final double[] scale;",
      "org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#247#              scale = new double[y0.length];",
      "org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#248#              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",
      "org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java#250#              scale = vecAbsoluteTolerance;"
    ]
  },
  {
    "project": "Math",
    "bugId": 76,
    "locations": [
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#162#                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#166#                for (int i = 0; i < p - 1; ++i) {",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#176#                }",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#178#                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#248#                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#252#                for (int i = 0; i < p - 1; ++i) {",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#261#                }",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#263#                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#171#FAULT_OF_OMISSION",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#180#FAULT_OF_OMISSION",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#256#FAULT_OF_OMISSION",
      "org/apache/commons/math/linear/SingularValueDecompositionImpl.java#265#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 77,
    "locations": [
      "org/apache/commons/math/linear/ArrayRealVector.java#721#            max += Math.max(max, Math.abs(a));",
      "org/apache/commons/math/linear/OpenMapRealVector.java#498#    public double getLInfNorm() {",
      "org/apache/commons/math/linear/OpenMapRealVector.java#499#        double max = 0;",
      "org/apache/commons/math/linear/OpenMapRealVector.java#500#        Iterator iter = entries.iterator();",
      "org/apache/commons/math/linear/OpenMapRealVector.java#501#        while (iter.hasNext()) {",
      "org/apache/commons/math/linear/OpenMapRealVector.java#502#            iter.advance();",
      "org/apache/commons/math/linear/OpenMapRealVector.java#503#            max += iter.value();",
      "org/apache/commons/math/linear/OpenMapRealVector.java#504#        }",
      "org/apache/commons/math/linear/OpenMapRealVector.java#505#        return max;",
      "org/apache/commons/math/linear/OpenMapRealVector.java#506#    }"
    ]
  },
  {
    "project": "Math",
    "bugId": 78,
    "locations": [
      "org/apache/commons/math/ode/events/EventState.java#191#FAULT_OF_OMISSION",
      "org/apache/commons/math/ode/events/EventState.java#198#FAULT_OF_OMISSION",
      "org/apache/commons/math/ode/events/EventState.java#199#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 79,
    "locations": [
      "org/apache/commons/math/util/MathUtils.java#1624#      int sum = 0;",
      "org/apache/commons/math/util/MathUtils.java#1626#          final int dp = p1[i] - p2[i];"
    ]
  },
  {
    "project": "Lang",
    "bugId": 7,
    "locations": [
      "org/apache/commons/lang3/math/NumberUtils.java#452#        if (str.startsWith(\"--\")) {",
      "org/apache/commons/lang3/math/NumberUtils.java#453#            return null;",
      "org/apache/commons/lang3/math/NumberUtils.java#454#        }",
      "org/apache/commons/lang3/math/NumberUtils.java#721#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/math/NumberUtils.java#725#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 8,
    "locations": [
      "org/apache/commons/lang3/time/FastDatePrinter.java#1098#        private final TimeZone zone;",
      "org/apache/commons/lang3/time/FastDatePrinter.java#1112#            zone = timeZone;",
      "org/apache/commons/lang3/time/FastDatePrinter.java#1134#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 1,
    "locations": [
      "org/apache/commons/lang3/math/NumberUtils.java#468#            if (hexDigits > 16) { // too many for Long",
      "org/apache/commons/lang3/math/NumberUtils.java#471#            if (hexDigits > 8) { // too many for an int",
      "org/apache/commons/lang3/math/NumberUtils.java#467#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 2,
    "locations": [
      "org/mockito/internal/util/Timer.java#3#FAULT_OF_OMISSION",
      "org/mockito/internal/util/Timer.java#10#FAULT_OF_OMISSION",
      "org/mockito/internal/util/Timer.java#28#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 5,
    "locations": [
      "org/apache/commons/lang3/LocaleUtils.java#97#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/LocaleUtils.java#128#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 30,
    "locations": [
      "com/google/javascript/jscomp/MustBeReachingVariableDef.java#396#        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {",
      "com/google/javascript/jscomp/FlowSensitiveInlineVariables.java#157#    (new NodeTraversal(compiler, this)).traverse(root);",
      "com/google/javascript/jscomp/MustBeReachingVariableDef.java#71#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MustBeReachingVariableDef.java#398#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MustBeReachingVariableDef.java#399#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MustBeReachingVariableDef.java#430#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 3,
    "locations": [
      "org/apache/commons/lang3/math/NumberUtils.java#593#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/math/NumberUtils.java#597#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/math/NumberUtils.java#601#FAULT_OF_OMISSION",
      "org/apache/commons/lang3/math/NumberUtils.java#605#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Lang",
    "bugId": 4,
    "locations": [
      "org/apache/commons/lang3/text/translate/LookupTranslator.java#31#    private final HashMap<CharSequence, CharSequence> lookupMap;",
      "org/apache/commons/lang3/text/translate/LookupTranslator.java#46#        lookupMap = new HashMap<CharSequence, CharSequence>();",
      "org/apache/commons/lang3/text/translate/LookupTranslator.java#51#                this.lookupMap.put(seq[0], seq[1]);",
      "org/apache/commons/lang3/text/translate/LookupTranslator.java#77#            final CharSequence result = lookupMap.get(subSeq);"
    ]
  },
  {
    "project": "Closure",
    "bugId": 34,
    "locations": [
      "com/google/javascript/jscomp/CodeGenerator.java#122#        addExpr(first, p, context);",
      "com/google/javascript/jscomp/CodeGenerator.java#123#        cc.addOp(opstr, true);",
      "com/google/javascript/jscomp/CodeGenerator.java#124#        addExpr(last, p + 1, rhsContext);",
      "com/google/javascript/jscomp/CodeGenerator.java#754#      cc.listSeparator();",
      "com/google/javascript/jscomp/CodePrinter.java#334#        if (getLastChar() != ' ') {"
    ]
  },
  {
    "project": "Closure",
    "bugId": 32,
    "locations": [
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1414#          if (builder.length() > 0) {",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1415#            builder.append(' ');",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1416#          }",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1358#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1364#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1382#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1389#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1390#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 37,
    "locations": [
      "com/google/javascript/jscomp/NodeTraversal.java#541#            body.isBlock());",
      "com/google/javascript/jscomp/parsing/IRFactory.java#667#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/IRFactory.java#670#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 35,
    "locations": [
      "com/google/javascript/jscomp/TypeInference.java#1121#    if (constraintObj != null && constraintObj.isRecordType()) {",
      "com/google/javascript/jscomp/TypeInference.java#1122#      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());",
      "com/google/javascript/jscomp/TypeInference.java#1123#      if (objType != null) {",
      "com/google/javascript/jscomp/TypeInference.java#1124#        for (String prop : constraintObj.getOwnPropertyNames()) {",
      "com/google/javascript/jscomp/TypeInference.java#1125#          JSType propType = constraintObj.getPropertyType(prop);",
      "com/google/javascript/jscomp/TypeInference.java#1126#          if (!objType.isPropertyTypeDeclared(prop)) {",
      "com/google/javascript/jscomp/TypeInference.java#1127#            JSType typeToInfer = propType;",
      "com/google/javascript/jscomp/TypeInference.java#1128#            if (!objType.hasProperty(prop)) {",
      "com/google/javascript/jscomp/TypeInference.java#1129#              typeToInfer =",
      "com/google/javascript/jscomp/TypeInference.java#1130#                  getNativeType(VOID_TYPE).getLeastSupertype(propType);",
      "com/google/javascript/jscomp/TypeInference.java#1131#            }",
      "com/google/javascript/jscomp/TypeInference.java#1132#            objType.defineInferredProperty(prop, typeToInfer, null);",
      "com/google/javascript/jscomp/TypeInference.java#1133#          }",
      "com/google/javascript/jscomp/TypeInference.java#1134#        }",
      "com/google/javascript/jscomp/TypeInference.java#1135#      }"
    ]
  },
  {
    "project": "Closure",
    "bugId": 39,
    "locations": [
      "com/google/javascript/rhino/jstype/PrototypeObjectType.java#380#        sb.append(getPropertyType(property).toString());",
      "com/google/javascript/rhino/jstype/PrototypeObjectType.java#383#        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
      "com/google/javascript/rhino/jstype/PrototypeObjectType.java#394#      return \"{...}\";"
    ]
  },
  {
    "project": "Closure",
    "bugId": 40,
    "locations": [
      "com/google/javascript/jscomp/NameAnalyzer.java#635#          JsName name = getName(ns.name, false);",
      "com/google/javascript/jscomp/NameAnalyzer.java#636#          if (name != null) {",
      "com/google/javascript/jscomp/NameAnalyzer.java#639#          }"
    ]
  },
  {
    "project": "Closure",
    "bugId": 41,
    "locations": [
      "com/google/javascript/jscomp/FunctionTypeBuilder.java#292#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/FunctionTypeBuilder.java#483#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 44,
    "locations": [
      "com/google/javascript/jscomp/CodeConsumer.java#194#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/CodeConsumer.java#199#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 100,
    "locations": [
      "com/google/javascript/jscomp/CheckGlobalThis.java#146#    return false;",
      "com/google/javascript/jscomp/CheckGlobalThis.java#99#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 45,
    "locations": [
      "com/google/javascript/jscomp/RemoveUnusedVars.java#741#          if (assignedToUnknownValue && hasPropertyAssign) {",
      "com/google/javascript/jscomp/RemoveUnusedVars.java#904#      this.maybeAliased = !assignNode.getParent().isExprResult();",
      "com/google/javascript/jscomp/RemoveUnusedVars.java#732#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/RemoveUnusedVars.java#739#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 42,
    "locations": [
      "com/google/javascript/jscomp/parsing/IRFactory.java#568#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/IRFactory.java#570#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 9,
    "locations": [
      "org/mockito/internal/stubbing/answers/CallsRealMethods.java#8#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/answers/CallsRealMethods.java#9#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/answers/CallsRealMethods.java#36#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 43,
    "locations": [
      "com/google/javascript/jscomp/TypedScopeCreator.java#420#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypedScopeCreator.java#547#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypedScopeCreator.java#580#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypedScopeCreator.java#581#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 48,
    "locations": [
      "com/google/javascript/jscomp/TypedScopeCreator.java#1521#      if (inferred) {",
      "com/google/javascript/jscomp/TypedScopeCreator.java#1523#        inferred = !(rhsValue != null &&",
      "com/google/javascript/jscomp/TypedScopeCreator.java#1524#            rhsValue.isFunction() &&",
      "com/google/javascript/jscomp/TypedScopeCreator.java#1525#            (info != null || !scope.isDeclared(qName, false)));"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 4,
    "locations": [
      "org/mockito/exceptions/Reporter.java#424#                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",",
      "org/mockito/exceptions/Reporter.java#434#                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",",
      "org/mockito/exceptions/Reporter.java#677#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 49,
    "locations": [
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#91#    if (declarationRoot.getType() == Token.FUNCTION) {",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#92#      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#93#        String name = c.getString();",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#94#        renamer.addDeclaredName(name);",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#95#      }",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#96#      Node functionBody = declarationRoot.getLastChild();",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#97#      findDeclaredNames(functionBody, null, renamer);",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#98#    }  else ",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#130#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#131#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#133#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#135#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#173#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#177#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java#180#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 3,
    "locations": [
      "org/mockito/internal/invocation/InvocationMatcher.java#127#            for (int position = indexOfVararg; position < matchers.size(); position++) {",
      "org/mockito/internal/invocation/InvocationMatcher.java#128#                Matcher m = matchers.get(position);",
      "org/mockito/internal/invocation/InvocationMatcher.java#130#                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);",
      "org/mockito/internal/invocation/InvocationMatcher.java#143#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 46,
    "locations": [
      "com/google/javascript/rhino/jstype/RecordType.java#140#  @Override",
      "com/google/javascript/rhino/jstype/RecordType.java#141#  public JSType getLeastSupertype(JSType that) {",
      "com/google/javascript/rhino/jstype/RecordType.java#142#    if (!that.isRecordType()) {",
      "com/google/javascript/rhino/jstype/RecordType.java#143#      return super.getLeastSupertype(that);",
      "com/google/javascript/rhino/jstype/RecordType.java#144#    }",
      "com/google/javascript/rhino/jstype/RecordType.java#145#    RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
      "com/google/javascript/rhino/jstype/RecordType.java#146#    for (String property : properties.keySet()) {",
      "com/google/javascript/rhino/jstype/RecordType.java#147#      if (that.toMaybeRecordType().hasProperty(property) &&",
      "com/google/javascript/rhino/jstype/RecordType.java#148#          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(",
      "com/google/javascript/rhino/jstype/RecordType.java#149#              getPropertyType(property))) {",
      "com/google/javascript/rhino/jstype/RecordType.java#150#        builder.addProperty(property, getPropertyType(property),",
      "com/google/javascript/rhino/jstype/RecordType.java#151#            getPropertyNode(property));",
      "com/google/javascript/rhino/jstype/RecordType.java#152#      }",
      "com/google/javascript/rhino/jstype/RecordType.java#153#    }",
      "com/google/javascript/rhino/jstype/RecordType.java#154#    return builder.build();",
      "com/google/javascript/rhino/jstype/RecordType.java#155#  }"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 6,
    "locations": [
      "org/mockito/Matchers.java#122#        return reportMatcher(Any.ANY).returnFalse();",
      "org/mockito/Matchers.java#137#        return reportMatcher(Any.ANY).returnZero();",
      "org/mockito/Matchers.java#152#        return reportMatcher(Any.ANY).returnChar();",
      "org/mockito/Matchers.java#167#        return reportMatcher(Any.ANY).returnZero();",
      "org/mockito/Matchers.java#182#        return reportMatcher(Any.ANY).returnZero();",
      "org/mockito/Matchers.java#197#        return reportMatcher(Any.ANY).returnZero();",
      "org/mockito/Matchers.java#212#        return reportMatcher(Any.ANY).returnZero();",
      "org/mockito/Matchers.java#227#        return reportMatcher(Any.ANY).returnZero();",
      "org/mockito/Matchers.java#244#        return (T) reportMatcher(Any.ANY).returnNull();",
      "org/mockito/Matchers.java#292#        return (T) reportMatcher(Any.ANY).returnFor(clazz);",
      "org/mockito/Matchers.java#309#        return (T) anyObject();",
      "org/mockito/Matchers.java#324#        return reportMatcher(Any.ANY).returnString();",
      "org/mockito/Matchers.java#339#        return reportMatcher(Any.ANY).returnList();",
      "org/mockito/Matchers.java#358#        return (List) reportMatcher(Any.ANY).returnList();",
      "org/mockito/Matchers.java#373#        return reportMatcher(Any.ANY).returnSet();",
      "org/mockito/Matchers.java#392#        return (Set) reportMatcher(Any.ANY).returnSet();",
      "org/mockito/Matchers.java#407#        return reportMatcher(Any.ANY).returnMap();",
      "org/mockito/Matchers.java#427#        return reportMatcher(Any.ANY).returnMap();",
      "org/mockito/Matchers.java#442#        return reportMatcher(Any.ANY).returnList();",
      "org/mockito/Matchers.java#461#        return (Collection) reportMatcher(Any.ANY).returnList();"
    ]
  },
  {
    "project": "Closure",
    "bugId": 47,
    "locations": [
      "com/google/javascript/jscomp/SourceMap.java#141#        new FilePosition(node.getLineno(), node.getCharno()),",
      "com/google/debugging/sourcemap/SourceMapConsumerV3.java#489#        .setLineNumber(entry.getSourceLine())",
      "com/google/debugging/sourcemap/SourceMapConsumerV3.java#490#        .setColumnPosition(entry.getSourceColumn());",
      "com/google/javascript/jscomp/SourceMap.java#138#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 108,
    "locations": [
      "com/google/javascript/jscomp/ScopedAliases.java#581#        if (info != null) {",
      "com/google/javascript/jscomp/ScopedAliases.java#259#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#316#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#432#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 106,
    "locations": [
      "com/google/javascript/rhino/JSDocInfoBuilder.java#189#    if (parseDocumentation) {",
      "com/google/javascript/rhino/JSDocInfoBuilder.java#191#    }",
      "com/google/javascript/jscomp/GlobalNamespace.java#907#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 105,
    "locations": [
      "com/google/javascript/jscomp/FoldConstants.java#1477#    StringBuilder sb = new StringBuilder();",
      "com/google/javascript/jscomp/FoldConstants.java#1483#        if (sb.length() > 0) {",
      "com/google/javascript/jscomp/FoldConstants.java#1488#        if (sb.length() > 0) {",
      "com/google/javascript/jscomp/FoldConstants.java#1492#          sb = new StringBuilder();",
      "com/google/javascript/jscomp/FoldConstants.java#1500#    if (sb.length() > 0) {"
    ]
  },
  {
    "project": "Closure",
    "bugId": 103,
    "locations": [
      "com/google/javascript/jscomp/DisambiguateProperties.java#763#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DisambiguateProperties.java#766#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ControlFlowAnalysis.java#894#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 102,
    "locations": [
      "com/google/javascript/jscomp/Normalize.java#94#    removeDuplicateDeclarations(root);",
      "com/google/javascript/jscomp/Normalize.java#89#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 101,
    "locations": [
      "com/google/javascript/jscomp/CommandLineRunner.java#433#    if (flags.process_closure_primitives) {",
      "com/google/javascript/jscomp/CommandLineRunner.java#434#      options.closurePass = true;",
      "com/google/javascript/jscomp/CommandLineRunner.java#435#    }",
      "com/google/javascript/jscomp/CommandLineRunner.java#437#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 11,
    "locations": [
      "com/google/javascript/jscomp/TypeCheck.java#1314#    } else if (n.getJSType() != null && parent.isAssign()) {",
      "com/google/javascript/jscomp/TypeCheck.java#1315#      return;"
    ]
  },
  {
    "project": "Closure",
    "bugId": 110,
    "locations": [
      "com/google/javascript/jscomp/ScopedAliases.java#366#        } else if (isVar) {",
      "com/google/javascript/jscomp/ScopedAliases.java#368#          Node value = n.hasChildren() ?",
      "com/google/javascript/jscomp/ScopedAliases.java#369#              v.getInitialValue().detachFromParent() :",
      "com/google/javascript/jscomp/ScopedAliases.java#371#          Node varNode = parent;",
      "com/google/javascript/rhino/Node.java#554#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#358#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#383#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#384#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#392#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#393#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#395#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#408#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#409#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 16,
    "locations": [
      "com/google/javascript/jscomp/ScopedAliases.java#172#    AliasedTypeNode(Node typeReference,",
      "com/google/javascript/jscomp/ScopedAliases.java#180#      typeReference.setString(aliasName);",
      "com/google/javascript/jscomp/ScopedAliases.java#468#          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));",
      "com/google/javascript/jscomp/ScopedAliases.java#170#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#175#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 13,
    "locations": [
      "com/google/javascript/jscomp/PeepholeOptimizationsPass.java#126#        traverse(c);",
      "com/google/javascript/jscomp/PeepholeOptimizationsPass.java#128#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 19,
    "locations": [
      "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#172#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java#173#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 17,
    "locations": [
      "com/google/javascript/jscomp/TypedScopeCreator.java#1291#              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {",
      "com/google/javascript/jscomp/TypedScopeCreator.java#1293#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 117,
    "locations": [
      "com/google/javascript/jscomp/TypeValidator.java#756#    JSType type = getJSType(n);",
      "com/google/javascript/jscomp/TypeValidator.java#757#    if (dereference) {",
      "com/google/javascript/jscomp/TypeValidator.java#758#      ObjectType dereferenced = type.dereference();",
      "com/google/javascript/jscomp/TypeValidator.java#759#      if (dereferenced != null) {",
      "com/google/javascript/jscomp/TypeValidator.java#760#        type = dereferenced;",
      "com/google/javascript/jscomp/TypeValidator.java#761#      }",
      "com/google/javascript/jscomp/TypeValidator.java#762#    }",
      "com/google/javascript/jscomp/TypeValidator.java#763#    if (type.isFunctionPrototypeType() ||",
      "com/google/javascript/jscomp/TypeValidator.java#764#        (type.toObjectType() != null &&",
      "com/google/javascript/jscomp/TypeValidator.java#765#         type.toObjectType().getConstructor() != null)) {",
      "com/google/javascript/jscomp/TypeValidator.java#766#      return type.toString();",
      "com/google/javascript/jscomp/TypeValidator.java#767#    }",
      "com/google/javascript/jscomp/TypeValidator.java#725#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypeValidator.java#727#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 116,
    "locations": [
      "com/google/javascript/jscomp/FunctionInjector.java#697#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/FunctionInjector.java#723#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 115,
    "locations": [
      "com/google/javascript/jscomp/FunctionInjector.java#697#    boolean hasSideEffects = false;",
      "com/google/javascript/jscomp/FunctionInjector.java#698#    if (block.hasChildren()) {",
      "com/google/javascript/jscomp/FunctionInjector.java#699#      Preconditions.checkState(block.hasOneChild());",
      "com/google/javascript/jscomp/FunctionInjector.java#700#      Node stmt = block.getFirstChild();",
      "com/google/javascript/jscomp/FunctionInjector.java#701#      if (stmt.isReturn()) {",
      "com/google/javascript/jscomp/FunctionInjector.java#702#        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);",
      "com/google/javascript/jscomp/FunctionInjector.java#703#      }",
      "com/google/javascript/jscomp/FunctionInjector.java#704#    }",
      "com/google/javascript/jscomp/FunctionInjector.java#730#          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {",
      "com/google/javascript/jscomp/FunctionInjector.java#731#            return CanInlineResult.NO;",
      "com/google/javascript/jscomp/FunctionInjector.java#732#          }"
    ]
  },
  {
    "project": "Closure",
    "bugId": 112,
    "locations": [
      "com/google/javascript/jscomp/TypeInference.java#1192#    Map<TemplateType, JSType> inferred = ",
      "com/google/javascript/jscomp/TypeInference.java#1193#        inferTemplateTypesFromParameters(fnType, n);",
      "com/google/javascript/jscomp/TypeInference.java#1195#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 22,
    "locations": [
      "com/google/javascript/jscomp/CheckSideEffects.java#101#    if (parent.getType() == Token.COMMA) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#102#      Node gramps = parent.getParent();",
      "com/google/javascript/jscomp/CheckSideEffects.java#103#      if (gramps.isCall() && parent == gramps.getFirstChild()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#104#        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#106#        }",
      "com/google/javascript/jscomp/CheckSideEffects.java#111#      if (n == parent.getLastChild()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#112#        for (Node an : parent.getAncestors()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#113#          int ancestorType = an.getType();",
      "com/google/javascript/jscomp/CheckSideEffects.java#114#          if (ancestorType == Token.COMMA)",
      "com/google/javascript/jscomp/CheckSideEffects.java#115#            continue;",
      "com/google/javascript/jscomp/CheckSideEffects.java#116#          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)",
      "com/google/javascript/jscomp/CheckSideEffects.java#117#            return;",
      "com/google/javascript/jscomp/CheckSideEffects.java#118#          else",
      "com/google/javascript/jscomp/CheckSideEffects.java#119#            break;",
      "com/google/javascript/jscomp/CheckSideEffects.java#120#        }",
      "com/google/javascript/jscomp/CheckSideEffects.java#121#      }",
      "com/google/javascript/jscomp/CheckSideEffects.java#122#    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#123#      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||",
      "com/google/javascript/jscomp/CheckSideEffects.java#124#           n == parent.getFirstChild().getNext().getNext())) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#125#      } else {",
      "com/google/javascript/jscomp/CheckSideEffects.java#127#      }",
      "com/google/javascript/jscomp/CheckSideEffects.java#134#      if (n.isQualifiedName() && n.getJSDocInfo() != null) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#135#        return;",
      "com/google/javascript/jscomp/CheckSideEffects.java#136#      } else if (n.isExprResult()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#137#        return;",
      "com/google/javascript/jscomp/CheckSideEffects.java#138#      }"
    ]
  },
  {
    "project": "Closure",
    "bugId": 121,
    "locations": [
      "com/google/javascript/jscomp/InlineVariables.java#304#          referenceInfo.isAssignedOnceInLifetime()) {",
      "com/google/javascript/jscomp/InlineVariables.java#308#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 23,
    "locations": [
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#1451#    for (int i = 0; current != null && i < intIndex; i++) {",
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#1453#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 21,
    "locations": [
      "com/google/javascript/jscomp/CheckSideEffects.java#101#    if (n.isExprResult()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#113#    if (parent.getType() == Token.COMMA) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#114#      if (isResultUsed) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#115#        return;",
      "com/google/javascript/jscomp/CheckSideEffects.java#116#      }",
      "com/google/javascript/jscomp/CheckSideEffects.java#117#      if (n == parent.getLastChild()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#118#        for (Node an : parent.getAncestors()) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#119#          int ancestorType = an.getType();",
      "com/google/javascript/jscomp/CheckSideEffects.java#120#          if (ancestorType == Token.COMMA) continue;",
      "com/google/javascript/jscomp/CheckSideEffects.java#121#          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;",
      "com/google/javascript/jscomp/CheckSideEffects.java#122#          else break;",
      "com/google/javascript/jscomp/CheckSideEffects.java#123#        }",
      "com/google/javascript/jscomp/CheckSideEffects.java#124#      }",
      "com/google/javascript/jscomp/CheckSideEffects.java#125#    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#126#      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {",
      "com/google/javascript/jscomp/CheckSideEffects.java#127#        return;",
      "com/google/javascript/jscomp/CheckSideEffects.java#128#      }",
      "com/google/javascript/jscomp/CheckSideEffects.java#129#    }",
      "com/google/javascript/jscomp/CheckSideEffects.java#130#    if ("
    ]
  },
  {
    "project": "Closure",
    "bugId": 26,
    "locations": [
      "com/google/javascript/jscomp/ProcessCommonJSModules.java#128#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ProcessCommonJSModules.java#207#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ProcessCommonJSModules.java#228#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 27,
    "locations": [
      "com/google/javascript/rhino/IR.java#224#    Preconditions.checkState(tryBody.isLabelName());",
      "com/google/javascript/rhino/IR.java#225#    Preconditions.checkState(finallyBody.isLabelName());",
      "com/google/javascript/rhino/IR.java#233#    Node catchBody = block(catchNode).copyInformationFrom(catchNode);",
      "com/google/javascript/rhino/IR.java#111#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 24,
    "locations": [
      "com/google/javascript/jscomp/ScopedAliases.java#278#        if (parent.isVar()) {",
      "com/google/javascript/jscomp/ScopedAliases.java#279#          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {",
      "com/google/javascript/jscomp/ScopedAliases.java#294#        }",
      "com/google/javascript/jscomp/ScopedAliases.java#287#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ScopedAliases.java#289#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 25,
    "locations": [
      "com/google/javascript/jscomp/TypeInference.java#1038#    scope = traverse(constructor, scope);",
      "com/google/javascript/jscomp/TypeInference.java#1059#    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {",
      "com/google/javascript/jscomp/TypeInference.java#1060#      scope = traverse(arg, scope);",
      "com/google/javascript/jscomp/TypeInference.java#1061#    }",
      "com/google/javascript/jscomp/TypeInference.java#1036#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypeInference.java#1055#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 29,
    "locations": [
      "com/google/javascript/jscomp/InlineObjectLiterals.java#157#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/InlineObjectLiterals.java#181#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/InlineObjectLiterals.java#216#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 35,
    "locations": [
      "org/mockito/Matchers.java#362#        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();",
      "org/mockito/Matchers.java#479#        return reportMatcher(new Equals(value)).<T>returnNull();",
      "org/mockito/Matchers.java#516#        return reportMatcher(new Same(value)).<T>returnNull();"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 36,
    "locations": [
      "org/mockito/internal/invocation/Invocation.java#11#FAULT_OF_OMISSION",
      "org/mockito/internal/invocation/Invocation.java#202#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 37,
    "locations": [
      "org/mockito/internal/stubbing/answers/AnswersValidator.java#28#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/answers/AnswersValidator.java#30#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 30,
    "locations": [
      "org/mockito/exceptions/Reporter.java#438#    public void smartNullPointerException(Location location) {",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#56#            new Reporter().smartNullPointerException(location);",
      "org/mockito/exceptions/Reporter.java#442#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 31,
    "locations": [
      "org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#60#\t\t\treturn invocation.getMethod().getName() + \"()\";",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java#9#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 32,
    "locations": [
      "org/mockito/internal/configuration/SpyAnnotationEngine.java#49#                        field.set(testClass, Mockito.spy(instance));",
      "org/mockito/internal/configuration/SpyAnnotationEngine.java#19#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 33,
    "locations": [
      "org/mockito/internal/invocation/InvocationMatcher.java#99#        return m1.equals(m2);",
      "org/mockito/internal/invocation/InvocationMatcher.java#98#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 128,
    "locations": [
      "com/google/javascript/jscomp/CodeGenerator.java#791#    return len > 0 && s.charAt(0) != '0';",
      "com/google/javascript/jscomp/CodeGenerator.java#785#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 127,
    "locations": [
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#170#            if (nextCfgNode == fallThrough) {",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#177#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 126,
    "locations": [
      "com/google/javascript/jscomp/MinimizeExitPoints.java#141#      if (NodeUtil.hasFinally(n)) {",
      "com/google/javascript/jscomp/MinimizeExitPoints.java#142#        Node finallyBlock = n.getLastChild();",
      "com/google/javascript/jscomp/MinimizeExitPoints.java#143#        tryMinimizeExits(finallyBlock, exitType, labelName);",
      "com/google/javascript/jscomp/MinimizeExitPoints.java#144#      }"
    ]
  },
  {
    "project": "Closure",
    "bugId": 74,
    "locations": [
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#907#    int lhType = left.getType();",
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#908#    int rhType = right.getType();",
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#1074#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 124,
    "locations": [
      "com/google/javascript/jscomp/ExploitAssigns.java#213#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/ExploitAssigns.java#214#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 72,
    "locations": [
      "com/google/javascript/jscomp/RenameLabels.java#215#      if (li.referenced) {",
      "com/google/javascript/jscomp/FunctionToBlockMutator.java#152#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 78,
    "locations": [
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#711#          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);",
      "com/google/javascript/jscomp/PeepholeFoldConstants.java#718#          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);"
    ]
  },
  {
    "project": "Closure",
    "bugId": 75,
    "locations": [
      "com/google/javascript/jscomp/NodeUtil.java#375#        return TernaryValue.TRUE;",
      "com/google/javascript/jscomp/NodeUtil.java#313#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/NodeUtil.java#314#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 131,
    "locations": [
      "com/google/javascript/rhino/TokenStream.java#199#        if (",
      "com/google/javascript/rhino/TokenStream.java#194#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 76,
    "locations": [
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#309#            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#317#            }",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#318#          }",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#319#      }",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#372#          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#378#      }",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#300#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#305#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#311#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#340#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#362#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#364#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#365#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 79,
    "locations": [
      "com/google/javascript/jscomp/Normalize.java#122#        .traverse(root);",
      "com/google/javascript/jscomp/VarCheck.java#221#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 80,
    "locations": [
      "com/google/javascript/jscomp/NodeUtil.java#1262#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/NodeUtil.java#2910#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 84,
    "locations": [
      "com/google/javascript/jscomp/parsing/IRFactory.java#341#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/IRFactory.java#797#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/IRFactory.java#806#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 85,
    "locations": [
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#153#    if (n.getParent() == null) {",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#154#      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#155#      if (outEdges.size() == 1) {",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#156#        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#157#      }",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#158#    }",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#160#      case Token.BLOCK:",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#161#        if (n.hasChildren()) {",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#162#          Node first = n.getFirstChild();",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#163#          return tryRemoveUnconditionalBranching(first);",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#164#        } else {",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#165#          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#166#        }",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#183#          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));",
      "com/google/javascript/jscomp/UnreachableCodeElimination.java#196#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 88,
    "locations": [
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#327#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/DeadAssignmentsElimination.java#330#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 14,
    "locations": [
      "org/apache/commons/math3/optim/nonlinear/vector/Weight.java#43#        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",
      "org/apache/commons/math3/optim/nonlinear/vector/Weight.java#44#        for (int i = 0; i < dim; i++) {",
      "org/apache/commons/math3/optim/nonlinear/vector/Weight.java#45#            weightMatrix.setEntry(i, i, weight[i]);",
      "org/apache/commons/math3/optim/nonlinear/vector/Weight.java#46#        }",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#267#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java#269#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 15,
    "locations": [
      "org/apache/commons/math3/util/FastMath.java#1541#            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {",
      "org/apache/commons/math3/util/FastMath.java#313#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 89,
    "locations": [
      "com/google/javascript/jscomp/GlobalNamespace.java#920#      if (type != Type.FUNCTION && aliasingGets > 0) {",
      "com/google/javascript/jscomp/CollapseProperties.java#484#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 16,
    "locations": [
      "org/apache/commons/math3/util/FastMath.java#397#      if (x < -20) {",
      "org/apache/commons/math3/util/FastMath.java#458#      if (x < -20) {",
      "org/apache/commons/math3/util/FastMath.java#82#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#394#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#395#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#399#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#400#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#455#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#456#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#460#FAULT_OF_OMISSION",
      "org/apache/commons/math3/util/FastMath.java#461#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 87,
    "locations": [
      "com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#533#          return NodeUtil.isExpressionNode(maybeExpr);",
      "com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#523#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#529#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java#532#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 17,
    "locations": [
      "org/apache/commons/math3/dfp/Dfp.java#1603#FAULT_OF_OMISSION",
      "org/apache/commons/math3/dfp/Dfp.java#1604#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 18,
    "locations": [
      "org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#932#                res[i] = (x[i] - boundaries[0][i]) / diff;",
      "org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#958#                res[i] = diff * x[i] + boundaries[0][i];",
      "org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#992#                if (x[i] < 0) {",
      "org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#995#                if (x[i] > 1.0) {",
      "org/apache/commons/math3/optimization/direct/CMAESOptimizer.java#990#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 12,
    "locations": [
      "org/apache/commons/math3/random/BitsStreamGenerator.java#29#    implements RandomGenerator {",
      "org/apache/commons/math3/random/BitsStreamGenerator.java#19#FAULT_OF_OMISSION",
      "org/apache/commons/math3/random/BitsStreamGenerator.java#31#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Math",
    "bugId": 13,
    "locations": [
      "org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#562#FAULT_OF_OMISSION",
      "org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java#564#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 12,
    "locations": [
      "org/mockito/internal/util/reflection/GenericMaster.java#20#FAULT_OF_OMISSION",
      "org/mockito/internal/util/reflection/GenericMaster.java#21#FAULT_OF_OMISSION",
      "org/mockito/internal/util/reflection/GenericMaster.java#22#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 13,
    "locations": [
      "org/mockito/internal/MockHandler.java#77#            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                ",
      "org/mockito/internal/MockHandler.java#81#FAULT_OF_OMISSION",
      "org/mockito/internal/MockHandler.java#83#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 26,
    "locations": [
      "org/joda/time/chrono/ZonedChronology.java#436#               return iZone.convertLocalToUTC(localInstant, false);",
      "org/joda/time/chrono/ZonedChronology.java#448#               return iZone.convertLocalToUTC(localInstant, false);",
      "org/joda/time/chrono/ZonedChronology.java#460#                return iZone.convertLocalToUTC(localInstant, false);",
      "org/joda/time/chrono/ZonedChronology.java#467#            long result = iZone.convertLocalToUTC(localInstant, false);",
      "org/joda/time/chrono/ZonedChronology.java#481#            return iZone.convertLocalToUTC(localInstant, false);",
      "org/joda/time/chrono/ZonedChronology.java#528#                return iZone.convertLocalToUTC(localInstant, false);",
      "org/joda/time/chrono/ZonedChronology.java#540#                return iZone.convertLocalToUTC(localInstant, false);"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 14,
    "locations": [
      "org/mockito/internal/MockitoCore.java#73#        mockingProgress.verificationStarted(mode);",
      "org/mockito/internal/MockHandler.java#20#FAULT_OF_OMISSION",
      "org/mockito/internal/MockHandler.java#76#FAULT_OF_OMISSION",
      "org/mockito/internal/MockHandler.java#79#FAULT_OF_OMISSION",
      "org/mockito/internal/MockitoCore.java#23#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 15,
    "locations": [
      "org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java#4#FAULT_OF_OMISSION",
      "org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java#25#FAULT_OF_OMISSION",
      "org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java#26#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 27,
    "locations": [
      "org/joda/time/format/PeriodFormatterBuilder.java#801#FAULT_OF_OMISSION",
      "org/joda/time/format/PeriodFormatterBuilder.java#804#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 22,
    "locations": [
      "org/joda/time/base/BasePeriod.java#222#        this(duration, null, null);",
      "org/joda/time/base/BasePeriod.java#224#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 10,
    "locations": [
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#71#                newDeepStubMock(returnTypeGenericMetadata),",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#87#    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#90#                withSettingsUsing(returnTypeGenericMetadata)",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#94#    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#99#        return mockSettings.serializable()",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#17#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#103#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 11,
    "locations": [
      "org/mockito/internal/creation/DelegatingMethod.java#60#        return 1;",
      "org/mockito/internal/creation/DelegatingMethod.java#55#FAULT_OF_OMISSION",
      "org/mockito/internal/creation/DelegatingMethod.java#56#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 23,
    "locations": [
      "org/joda/time/DateTimeZone.java#572#            map.put(\"IET\", \"America/Indianapolis\");",
      "org/joda/time/DateTimeZone.java#575#            map.put(\"AGT\", \"America/Buenos_Aires\");",
      "org/joda/time/DateTimeZone.java#577#            map.put(\"WET\", \"Europe/London\");",
      "org/joda/time/DateTimeZone.java#578#            map.put(\"ECT\", \"Europe/Paris\");",
      "org/joda/time/DateTimeZone.java#581#            map.put(\"EET\", \"Europe/Bucharest\");",
      "org/joda/time/DateTimeZone.java#583#            map.put(\"MET\", \"Asia/Tehran\");",
      "org/joda/time/DateTimeZone.java#586#            map.put(\"IST\", \"Asia/Calcutta\");",
      "org/joda/time/DateTimeZone.java#588#            map.put(\"VST\", \"Asia/Saigon\");",
      "org/joda/time/DateTimeZone.java#564#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 25,
    "locations": [
      "org/jfree/chart/renderer/category/StatisticalBarRenderer.java#315#            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();",
      "org/jfree/chart/renderer/category/StatisticalBarRenderer.java#459#            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();",
      "org/jfree/chart/renderer/category/StatisticalBarRenderer.java#259#FAULT_OF_OMISSION",
      "org/jfree/chart/renderer/category/StatisticalBarRenderer.java#344#FAULT_OF_OMISSION",
      "org/jfree/chart/renderer/category/StatisticalBarRenderer.java#403#FAULT_OF_OMISSION",
      "org/jfree/chart/renderer/category/StatisticalBarRenderer.java#487#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 26,
    "locations": [
      "org/jfree/chart/axis/Axis.java#1192#FAULT_OF_OMISSION",
      "org/jfree/chart/axis/Axis.java#1197#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 16,
    "locations": [
      "org/mockito/Mockito.java#827#        return MOCKITO_CORE.mock(classToMock, mockSettings);",
      "org/mockito/Mockito.java#899#                .defaultAnswer(CALLS_REAL_METHODS)); ",
      "org/mockito/internal/MockitoCore.java#32#    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); }",
      "org/mockito/internal/MockitoCore.java#33#    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {",
      "org/mockito/internal/MockitoCore.java#35#FAULT_OF_OMISSION",
      "org/mockito/internal/MockitoCore.java#36#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 17,
    "locations": [
      "org/mockito/internal/creation/MockSettingsImpl.java#22#        return this.extraInterfaces(java.io.Serializable.class);",
      "org/mockito/internal/creation/MockSettingsImpl.java#74#        return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);",
      "org/mockito/internal/creation/MockSettingsImpl.java#20#FAULT_OF_OMISSION",
      "org/mockito/internal/util/MockUtil.java#19#FAULT_OF_OMISSION",
      "org/mockito/internal/util/MockUtil.java#45#FAULT_OF_OMISSION",
      "org/mockito/internal/util/MockUtil.java#46#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 19,
    "locations": [
      "org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java#114#            Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();",
      "org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java#23#    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {",
      "org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java#15#            Object fieldInstance",
      "org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#23#\t\t\tField field, Object fieldInstance) {",
      "org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#31#\t\t\treturn next.filterCandidate(mockNameMatches, field,",
      "org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#43#\t\treturn next.filterCandidate(mocks, field, fieldInstance);",
      "org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java#20#    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {",
      "org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java#28#        return next.filterCandidate(mockTypeMatches, field, fieldInstance);",
      "org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java#13#FAULT_OF_OMISSION",
      "org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java#9#FAULT_OF_OMISSION",
      "org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java#42#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 50,
    "locations": [
      "com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#376#      if (!NodeUtil.isImmutableValue(right)) {",
      "com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#389#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java#390#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 56,
    "locations": [
      "com/google/javascript/jscomp/SourceFile.java#242#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/SourceFile.java#243#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 53,
    "locations": [
      "com/google/javascript/jscomp/InlineObjectLiterals.java#331#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/InlineObjectLiterals.java#350#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 54,
    "locations": [
      "com/google/javascript/jscomp/TypedScopeCreator.java#1413#          if (!qVar.isTypeInferred()) {",
      "com/google/javascript/rhino/jstype/FunctionType.java#341#        baseType.isUnknownType() ||",
      "com/google/javascript/rhino/jstype/FunctionType.java#366#    boolean replacedPrototype = prototype != null;",
      "com/google/javascript/rhino/jstype/FunctionType.java#372#FAULT_OF_OMISSION",
      "com/google/javascript/rhino/jstype/FunctionType.java#374#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 21,
    "locations": [
      "org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#157#FAULT_OF_OMISSION",
      "org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#188#FAULT_OF_OMISSION",
      "org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#741#FAULT_OF_OMISSION",
      "org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java#742#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 22,
    "locations": [
      "org/jfree/data/KeyedObjects2D.java#231#        if (row >= 0) {",
      "org/jfree/data/KeyedObjects2D.java#233#            return rowData.getObject(columnKey);",
      "org/jfree/data/KeyedObjects2D.java#378#                rowData.removeValue(columnKey);",
      "org/jfree/data/KeyedObjects2D.java#318#FAULT_OF_OMISSION",
      "org/jfree/data/KeyedObjects2D.java#319#FAULT_OF_OMISSION",
      "org/jfree/data/KeyedObjects2D.java#320#FAULT_OF_OMISSION",
      "org/jfree/data/KeyedObjects2D.java#345#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 58,
    "locations": [
      "com/google/javascript/jscomp/LiveVariablesAnalysis.java#206#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/LiveVariablesAnalysis.java#208#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 17,
    "locations": [
      "org/joda/time/DateTimeZone.java#1167#        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);",
      "org/joda/time/DateTimeZone.java#1168#        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);",
      "org/joda/time/DateTimeZone.java#1169#        if (instantBefore == instantAfter) {",
      "org/joda/time/DateTimeZone.java#1174#        long local = convertUTCToLocal(instant);",
      "org/joda/time/DateTimeZone.java#1175#        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);",
      "org/joda/time/DateTimeZone.java#1178#FAULT_OF_OMISSION",
      "org/joda/time/DateTimeZone.java#1179#FAULT_OF_OMISSION",
      "org/joda/time/DateTimeZone.java#1180#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 23,
    "locations": [
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#44#    private MockitoCore mockitoCore = new MockitoCore();",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#45#    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#114#        container.addAnswer(new Answer<Object>() {",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#52#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#59#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#60#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#100#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#123#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#124#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 18,
    "locations": [
      "org/joda/time/chrono/GJChronology.java#364#FAULT_OF_OMISSION",
      "org/joda/time/chrono/GJChronology.java#367#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 25,
    "locations": [
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#53#        return getMock(invocation);",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#56#    private Object getMock(InvocationOnMock invocation) throws Throwable {",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#68#        return recordDeepStubMock(invocation, container);",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#81#    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#82#        Class<?> clz = invocation.getMethod().getReturnType();",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#83#        final Object mock = org.mockito.Mockito.mock(clz, this);",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#7#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#19#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#77#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#78#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#79#FAULT_OF_OMISSION",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java#80#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 13,
    "locations": [
      "org/joda/time/format/PeriodFormatterBuilder.java#1098#                sum = Math.max(sum, 4);",
      "org/joda/time/format/PeriodFormatterBuilder.java#1133#FAULT_OF_OMISSION",
      "org/joda/time/format/PeriodFormatterBuilder.java#1142#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 20,
    "locations": [
      "org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java#34#            mockInstance = classInstantiator.instantiate(mockedProxyType);",
      "org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java#45#                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),",
      "org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java#32#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 14,
    "locations": [
      "org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#209#FAULT_OF_OMISSION",
      "org/joda/time/chrono/BasicMonthOfYearDateTimeField.java#210#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 21,
    "locations": [
      "org/mockito/internal/creation/instance/ConstructorInstantiator.java#17#        return withOuterClass(cls);",
      "org/mockito/internal/creation/instance/ConstructorInstantiator.java#20#    private <T> T withOuterClass(Class<T> cls) {",
      "org/mockito/internal/creation/instance/ConstructorInstantiator.java#24#            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());",
      "org/mockito/internal/creation/instance/ConstructorInstantiator.java#25#            return c.newInstance(outerClassInstance);",
      "org/mockito/internal/creation/instance/ConstructorInstantiator.java#29#FAULT_OF_OMISSION",
      "org/mockito/internal/creation/instance/ConstructorInstantiator.java#36#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 11,
    "locations": [
      "org/joda/time/tz/ZoneInfoCompiler.java#68#    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();",
      "org/joda/time/tz/ZoneInfoCompiler.java#69#    static {",
      "org/joda/time/tz/ZoneInfoCompiler.java#70#        cVerbose.set(Boolean.FALSE);",
      "org/joda/time/tz/ZoneInfoCompiler.java#71#    }"
    ]
  },
  {
    "project": "Time",
    "bugId": 12,
    "locations": [
      "org/joda/time/LocalDate.java#212#            yearOfEra,",
      "org/joda/time/LocalDateTime.java#201#            yearOfEra,",
      "org/joda/time/LocalDate.java#210#FAULT_OF_OMISSION",
      "org/joda/time/LocalDate.java#243#FAULT_OF_OMISSION",
      "org/joda/time/LocalDate.java#244#FAULT_OF_OMISSION",
      "org/joda/time/LocalDateTime.java#199#FAULT_OF_OMISSION",
      "org/joda/time/LocalDateTime.java#236#FAULT_OF_OMISSION",
      "org/joda/time/LocalDateTime.java#237#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 14,
    "locations": [
      "org/jfree/chart/plot/XYPlot.java#2293#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/XYPlot.java#2528#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/CategoryPlot.java#2166#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/CategoryPlot.java#2447#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 15,
    "locations": [
      "org/jfree/chart/plot/PiePlot.java#1378#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/PiePlot.java#2051#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/PiePlot.java#2053#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 16,
    "locations": [
      "org/jfree/data/category/DefaultIntervalCategoryDataset.java#207#                this.seriesKeys = null;",
      "org/jfree/data/category/DefaultIntervalCategoryDataset.java#208#                this.categoryKeys = null;",
      "org/jfree/data/category/DefaultIntervalCategoryDataset.java#338#        if (categoryKeys.length != this.startData[0].length) {"
    ]
  },
  {
    "project": "Mockito",
    "bugId": 27,
    "locations": [
      "org/mockito/internal/util/MockUtil.java#64#        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);",
      "org/mockito/internal/util/MockUtil.java#65#        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));"
    ]
  },
  {
    "project": "Closure",
    "bugId": 60,
    "locations": [
      "com/google/javascript/jscomp/NodeUtil.java#108#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/NodeUtil.java#136#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/NodeUtil.java#137#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 18,
    "locations": [
      "org/jfree/data/DefaultKeyedValues.java#318#        if (index < this.keys.size()) {",
      "org/jfree/data/DefaultKeyedValues.java#320#        }",
      "org/jfree/data/DefaultKeyedValues.java#335#\t\t\treturn;",
      "org/jfree/data/DefaultKeyedValues2D.java#455#FAULT_OF_OMISSION",
      "org/jfree/data/DefaultKeyedValues2D.java#458#FAULT_OF_OMISSION",
      "org/jfree/data/DefaultKeyedValues2D.java#459#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Chart",
    "bugId": 19,
    "locations": [
      "org/jfree/chart/plot/CategoryPlot.java#698#FAULT_OF_OMISSION",
      "org/jfree/chart/plot/CategoryPlot.java#973#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 66,
    "locations": [
      "com/google/javascript/jscomp/TypeCheck.java#516#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/TypeCheck.java#517#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Closure",
    "bugId": 64,
    "locations": [
      "com/google/javascript/jscomp/Compiler.java#1432#        String code = toSource(root, sourceMap);",
      "com/google/javascript/jscomp/Compiler.java#1461#    return toSource(n, null);",
      "com/google/javascript/jscomp/Compiler.java#1467#  private String toSource(Node n, SourceMap sourceMap) {",
      "com/google/javascript/jscomp/Compiler.java#1473#    builder.setTagAsStrict("
    ]
  },
  {
    "project": "Closure",
    "bugId": 68,
    "locations": [
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#870#                  }",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#868#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1709#FAULT_OF_OMISSION",
      "com/google/javascript/jscomp/parsing/JsDocInfoParser.java#1761#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 20,
    "locations": [
      "org/joda/time/format/DateTimeFormatterBuilder.java#2544#                    bucket.setZone(DateTimeZone.forID(id));",
      "org/joda/time/format/DateTimeFormatterBuilder.java#2545#                    return position + id.length();",
      "org/joda/time/format/DateTimeFormatterBuilder.java#2542#FAULT_OF_OMISSION",
      "org/joda/time/format/DateTimeFormatterBuilder.java#2547#FAULT_OF_OMISSION"
    ]
  },
  {
    "project": "Time",
    "bugId": 21,
    "locations": [
      "org/joda/time/tz/DefaultNameProvider.java#72#              byNameKeyCache.put(setLoc[2], new String[] {setLoc[2], setLoc[1]});",
      "org/joda/time/tz/DefaultNameProvider.java#76#              if (setLoc[2].equals(setLoc[4])) {",
      "org/joda/time/tz/DefaultNameProvider.java#77#                  byNameKeyCache.put(setLoc[4] + \"-Summer\", new String[] {setLoc[4], setLoc[3]});",
      "org/joda/time/tz/DefaultNameProvider.java#79#                  byNameKeyCache.put(setLoc[4], new String[] {setLoc[4], setLoc[3]});",
      "org/joda/time/tz/DefaultNameProvider.java#80#              }",
      "org/joda/time/tz/DefaultNameProvider.java#81#                break;",
      "org/joda/time/tz/DefaultNameProvider.java#66#FAULT_OF_OMISSION",
      "org/joda/time/tz/DefaultNameProvider.java#71#FAULT_OF_OMISSION"
    ]
  }
]
